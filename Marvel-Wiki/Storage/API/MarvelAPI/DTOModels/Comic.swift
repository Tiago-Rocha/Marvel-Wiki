//
// Comic.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct Comic: Codable {

    /** The unique ID of the comic resource. */
    public var _id: Int?
    /** The ID of the digital comic representation of this comic. Will be 0 if the comic is not available digitally. */
    public var digitalId: Int?
    /** The canonical title of the comic. */
    public var title: String?
    /** The number of the issue in the series (will generally be 0 for collection formats). */
    public var issueNumber: Double?
    /** If the issue is a variant (e.g. an alternate cover, second printing, or directorâ€™s cut), a text description of the variant. */
    public var variantDescription: String?
    /** The preferred description of the comic. */
    public var _description: String?
    /** The date the resource was most recently modified. */
    public var modified: Date?
    /** The ISBN for the comic (generally only populated for collection formats). */
    public var isbn: String?
    /** The UPC barcode number for the comic (generally only populated for periodical formats). */
    public var upc: String?
    /** The Diamond code for the comic. */
    public var diamondCode: String?
    /** The EAN barcode for the comic. */
    public var ean: String?
    /** The ISSN barcode for the comic. */
    public var issn: String?
    /** The publication format of the comic e.g. comic, hardcover, trade paperback. */
    public var format: String?
    /** The number of story pages in the comic. */
    public var pageCount: Int?
    /** A set of descriptive text blurbs for the comic. */
    public var textObjects: [TextObject]?
    /** The canonical URL identifier for this resource. */
    public var resourceURI: String?
    /** A set of public web site URLs for the resource. */
    public var urls: [Url]?
    /** A summary representation of the series to which this comic belongs. */
    public var series: SeriesSummary?
    /** A list of variant issues for this comic (includes the \&quot;original\&quot; issue if the current issue is a variant). */
    public var variants: [ComicSummary]?
    /** A list of collections which include this comic (will generally be empty if the comic&#39;s format is a collection). */
    public var collections: [ComicSummary]?
    /** A list of issues collected in this comic (will generally be empty for periodical formats such as \&quot;comic\&quot; or \&quot;magazine\&quot;). */
    public var collectedIssues: [ComicSummary]?
    /** A list of key dates for this comic. */
    public var dates: [ComicDate]?
    /** A list of prices for this comic. */
    public var prices: [ComicPrice]?
    /** The representative image for this comic. */
    public var thumbnail: Image?
    /** A list of promotional images associated with this comic. */
    public var images: [Image]?
    /** A resource list containing the creators associated with this comic. */
    public var creators: CreatorList?
    /** A resource list containing the characters which appear in this comic. */
    public var characters: CharacterList?
    /** A resource list containing the stories which appear in this comic. */
    public var stories: StoryList?
    /** A resource list containing the events in which this comic appears. */
    public var events: EventList?

    public init(_id: Int?, digitalId: Int?, title: String?, issueNumber: Double?, variantDescription: String?, _description: String?, modified: Date?, isbn: String?, upc: String?, diamondCode: String?, ean: String?, issn: String?, format: String?, pageCount: Int?, textObjects: [TextObject]?, resourceURI: String?, urls: [Url]?, series: SeriesSummary?, variants: [ComicSummary]?, collections: [ComicSummary]?, collectedIssues: [ComicSummary]?, dates: [ComicDate]?, prices: [ComicPrice]?, thumbnail: Image?, images: [Image]?, creators: CreatorList?, characters: CharacterList?, stories: StoryList?, events: EventList?) {
        self._id = _id
        self.digitalId = digitalId
        self.title = title
        self.issueNumber = issueNumber
        self.variantDescription = variantDescription
        self._description = _description
        self.modified = modified
        self.isbn = isbn
        self.upc = upc
        self.diamondCode = diamondCode
        self.ean = ean
        self.issn = issn
        self.format = format
        self.pageCount = pageCount
        self.textObjects = textObjects
        self.resourceURI = resourceURI
        self.urls = urls
        self.series = series
        self.variants = variants
        self.collections = collections
        self.collectedIssues = collectedIssues
        self.dates = dates
        self.prices = prices
        self.thumbnail = thumbnail
        self.images = images
        self.creators = creators
        self.characters = characters
        self.stories = stories
        self.events = events
    }

    public enum CodingKeys: String, CodingKey { 
        case _id = "id"
        case digitalId
        case title
        case issueNumber
        case variantDescription
        case _description = "description"
        case modified
        case isbn
        case upc
        case diamondCode
        case ean
        case issn
        case format
        case pageCount
        case textObjects
        case resourceURI
        case urls
        case series
        case variants
        case collections
        case collectedIssues
        case dates
        case prices
        case thumbnail
        case images
        case creators
        case characters
        case stories
        case events
    }


}

